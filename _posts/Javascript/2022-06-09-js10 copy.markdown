---
layout: post
title: 자바스크립트 - 비동기 처리
date: 2022-06-10 14:33:28 +0900
category: Javascript
---

## <span style="color:#97cab3;font-weight:bold">동기/비동기 방식의 이해</span>
 = 동기(syncronous): 코드 한줄, 한줄 실행이 끝난 뒤 다음 코드로 넘어가는 처리 방식   

 = 비동기(asyncronous): 코드 실행 후, 완료 여부와 관계없이 다음 코드로 넘어가는 처리 방식    
      -> 요청 결과 여부와 상관없이 다른 코드를 실행한다는 것은 효율성 측면에서 큰 장점이지만, 코드의 실행 순서를 보장받아야할 때는 큰 단점이 되고, 이러한 단점을 해결하기 위해 비동기 처리를 해야한다.

 ![동기/비동기 설명](../../../../public/img/async.png) 

### <span style="color:#febc68;font-weight:bold">js 비동기 처리</span>
 1. 콜백함수
```javascript
      function first(next) {
         setTimeout(() => {
            console.log("first");
            next();
         }, 2000);
      }

      function second() {
         console.log("second");
      }
      first(second);
   ```
   - 콜백 함수끼리 꼬리를 무는 형태가 되어 가독성이 떨어지고 유지보수가 어려워진다는 단점이 있다. 

 2. promise 객체 : 콜백합수의 단점이 개선된 비동기 처리 방식  
    - promise 의 상태값  

      - 대기(pending): promise 객체를 새로 생성한 상태. 대기
      - 이행(fulfiled): resolove 가 실행된 상태. 비동기 로직이 완료된 상태
      - 거부(rejected): reject가 실행된 상태. 비동기 로직에서 에러가 난 경우  
    
    - promise 객체 구조
```javascript
      new Promise((resolve, reject) => {});
      //resolve가 호출 된다 → 이행상태 →  promise 객체의 then() 메서드 호출
      //reject가 호출된다 → 거부 상태 →  promise 객체의 catch() 메서드 호출
   ```
 3. async await
   - 기본 사용법
   ```javascript
      async fuction 함수명(){
         await 비동기처리함수();
      }
   ```

   <br/>


