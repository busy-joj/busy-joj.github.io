---
layout: post
title: Vue(4) - computed
date: 2022-06-13 10:21:18 +0900
category: Javascript
---
 
### <span style="color:#febc68;font-weight:bold">computed(계산된)</span>  
 = 탬플릿 내에 표현식을 넣어야 할 경우, 탬플릿 안에 작성하면 코드가 비대해지고 유지보수가 어려워지기 때문에, computed 속성을 이용하여 복잡한 로직을 관리할 수 있다.

 ```html
    <section v-if="hasFruit"> 
    <!-- <section v-if="fruits.length > 0"> 탬플릿 내 표현식을 computed에 작성하여 간결화-->
      <ul>
        <li 
        v-for="fruit in fruits" 
        :key="fruit"> 
        {{ fruit }} 
        </li>
      </ul>
    </section>

    <script>
      export default{
        data(){
          return {
            fruits:[
              'apple', 'banana', 'cherry'
            ]
          }
        },
        computed:{
          hasFruit(){
            return this.fruits.length > 0
          }
        }
      }
    </script>
  ```


### <span style="color:#febc68;font-weight:bold">computed 캐싱</span> 

```html
    <template>
      <h1>
        <!-- {{ msg.split('').reverse().join('') }} = 탬플릿에 직접 작성한 표현식-->
        <!-- {{ reverseMessage() }} = methods 를 이용한 방식-->
        {{ reversedMessage }}
      </h1>
    </template>

    <script>
    export default{
      data() {
        return {
          msg: 'Hello Computed!'
        }
      },
       // methods:{
      //   reverseMessage(){
      //     return this.msg.split('').reverse().join('')
      //   }
      // }
      computed:{
        reversedMessage(){
          return this.msg.split('').reverse().join('')
        }
      }
      // methods와 computed 속성의 결과값은 같다.
      // 그러나 methods는 호출될 때마다 함수를 실행시키는 반면, computed는 데이터가 변경될 때만 함수를 다시 실행하기 때문에, 
      // 여러 번 요청해도 다시 계산하지 않고, 계산 되어 있던 결과를 반환한다.
    }
    </script>
  ```

### <span style="color:#febc68;font-weight:bold">Getter, Setter</span>  
= computed 속성은 기본적으로 Getter 함수만 가지고 있다. 즉, 읽기전용 이라는 의미!!  

= 따라서 필요에 따라 업데이드나 수정이 가능한 setter 함수로 만들어 써야한다. 
```html
    <template>
      <button @click="add">Add</button>
      <h1>
        {{ reversedMessage }}
      </h1>
    </template>

    <script>
    export default{
      data() {
        return {
          msg: 'Hello Computed!'
        }
      },
      computed:{
        // Getter - 읽기 전용
        // reversedMessage(){
        //   return this.msg.split('').reverse().join('')
        //}
        // Getter & Setter 로 작성하자
        reversecMessage :{
          get(){
            return this.msg.split('').reverse().join('')
          },
          set(newValue){
            this.msg = newValue
          }
        }
      },
      methods:{
        add(){
          this.reversedMessage += '!?'
        }
      }
    }
    </script>
  ```


### <span style="color:#febc68;font-weight:bold">Watch</span> 
= watch 속성에 감시할 데이터를 지정하고, 변경이 감지되면 작성된 로직을 실행한다.
```html
    <template>
      <h1 @click="changeMessage">{{ msg }}</h1>
      <h1>{{ reversedMessage }}</h1>
    </template>

    <script>
    export default{
      data() {
        return {
          msg: 'Hello?'
        }
      },
      computed:{
        
        reversedMessage(){
          return this.msg.split('').reverse().join('')
        }
      },
      watch:{
        msg(aaaa) {
          console.log('msg: ', aaaa)
        },
        reversedMessage(){
          console.log('reversedMessage: ', this.msg)
        }
      },
      methods:{
        changeMessage(){
          this.msg = 'Good!'
        }
      }
    }
    </script>
  ```