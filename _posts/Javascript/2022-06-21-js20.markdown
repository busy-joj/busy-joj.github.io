---
layout: post
title: 자바스크립트 - 데이터 불변성
date: 2022-06-20 22:23:45 +0900
category: Javascript
---
### <span style="color:#febc68;font-weight:bold">데이터 불변성 (Immutability)</span>  
- 원시 데이터 : String, Number, Boolean, undefined, null
- 참조형 데이터 : Object, Array, Function  

변수에 값을 할당한다는 것은 값의 메모리 주소를 가리키는 것을 의미한다.   
원시 데이터부터 살펴보자.
원시 데이터는 불변성을 유지하는 타입이다.
```javascript
  let a = 1
  let b = 4
  // a와 b는 각각 다른 메모리 주소로 들어간다.
  console.log(a, b, a === b)
  // 출력값 1 4 false

  b = a
  // a의 메모리 주소를 b에게 할당
  console.log(a, b, a === b)
  // 출력값 1 1 ture
  
  a = 7
  // a에 새로운 메모리 주소 할당
  console.log(a, b, a === b)
  // 출력값 7 1 false

  let c = 1
  // 기존 메모리에 있는 값이므로 존재하던 메모리주소로 할당
  console.log(b, c, b === c)
  // 출력값 1 1 true
```

참조형 데이터를 살펴보자  
참조형 데이터는 원시형 데이터와 다르게 새로운 값을 만들때마다 새로운 메모리 주소에 할당되기 때문에,  
불변성이 없는, 즉 가변하는 데이터다.
```javascript
  let a = { k : 1}
  let b = { k : 1}
  console.log(a, b, a === b)
  // 모양은 같은 객체이지만, 서로 다른 메모리 주소를 바라보고 있다.

  a.k = 7
  b = a
  // a의 메모리 주소를 b에게 할당
  console.log(a, b, a === b)
  a.k =2
  console.log(a, b, a === b)
  let c = b
  console.log(a, b, c, a === c)
  a.k = 9
  console.log(a, b, c, a === c)
```

같은 메모리를 바라보고 있는 여러개의 변수가 있을 때,  
한 쪽 변수의 값을 수정하게 되면 다른 값도 의도치 않게 바뀔 수 있으니 주의가 필요하다.


### <span style="color:#febc68;font-weight:bold">얕은 복사와 깊은 복사</span>
얕은 복사(Shallow copy)는 객체의 속성을 복사하여 새로운 메모리에 할당해준다.  

Object.assign을 이용하여 새로운 메모리 주소를 할당한 객체를 만들어준다.
```javascript
  const user = {
    name : 'joj',
    age : 22,
    emails : ['joj@mail.com']
  }
  const copyUser = Object.assign({},user)
  console.log(copyUser === user)

  user.age = 34
  console.log('user', user)
  console.log('copyUser', copyUser)
```

전개 연산자를 이용하여 복사 할 수도 있다.
```javascript
  const user = {
    name : 'joj',
    age : 22,
    emails : ['joj@mail.com']
  }
  const copyUser = {...user}
  console.log(copyUser === user)

  user.age = 34
  console.log('user', user)
  console.log('copyUser', copyUser)
```


그러나 이 경우 객체 속성 내에 있는 또다른 참고형 데이터들은 복사되지 않아 객체 안의 참고형 데이터를 수정할 경우 의도치 않은 객체에서 데이터 변경이 일어날 수 있는데, 이를 방지하기 위해서 깊은 복사를 해야한다.
깊은 복사(Deep copy)는 객체의 모든 depth의 속성까지 복사한다.
그러나 javascript로만 실행하기는 복잡하기 때문에, Lodash를 이용하여 해준다.  
Lodash 라이브러리를 사용하여 _.cloneDeep(복사할 객체) 사용한다.