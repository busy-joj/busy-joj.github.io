---
layout: post
title: 자바스크립트 - 프로토타입(prototype)
date: 2022-06-17 15:08:16 +0900
category: Javascript
---

자바스크립의 객체 지향을 지탱하는 핵심적인 개념이다!  

### <span style="color:#febc68;font-weight:bold">프로토타입 = 원형 </span>  

객체를 상속받기 위해 프로토타입이라는 방식을 사용한다.


자바스크립의 타입에 따라 각각의 프로토타입을 가지고 있다.

```javascript
   Array.prototype
   Object.prototype
   String.prototype
   // 타입별로 다른 prototype이 출력됨을 확인할 수 있다. 
```
데이터를 만드는 방식은 크게 리터럴과 객체 방식이 있다.
- 리터럴 방식은 "" 문자, {} 객체, [] 배열 등 기호를 사용하여 데이터를 만들고, 객체 방식은 new라는 생성 연산자를 이용하여 생성한다.
- 리터럴 방식을 넣으면 자바스크립트 엔진에 의해서 내부에서 객체방식 자동변환되어 실행된다.
```javascript
   //숫자
   var age = 10;
   var age = new Number(10);

   //문자
   var name = "hi";
   var name=new String("hi");

   //배열
   var aryData = ["data1","data2","dat3"];
   var aryData = new Array("data1","data2","dat3");
```







```javascript
   // Ultra, Super, Sub 3개의 생성자
   function Ultra(){}
   Ultra.prototype.ultraProp = true;
   function Super(){}
   Super.prototype = new Ultra();
   function Sub(){}
   Sub.prototype = new Super();
   
   var o = new Sub();
   console.log(o.ultraProp)  // 출력값 true
   
```

```javascript
   function func(){}
   func.prototype
   // 출력값 func{} = 빈 객체

   
```














this는 함수 내에서 함수 호출 맥락을 의미한다.  
맥락이라는 것은 상황에 따라 달라진다는 의미로, 함수를 어떻게 호출하느냐에 따라 this가 가리키는 대상이 달라진다는 뜻이다.  
```javascript
   function func(){
      if(window===this){
         document.write("window === this")
      }
   }

   func();
   //결과 window === this
```
### <span style="color:#febc68;font-weight:bold">메소드의 호출 </span>
객체의 소속인 메소드의 this는 그 객체를 가르킨다.
```javascript

   const o = {
      func : function(){
      if(o === this){
         document.write("o === this")
      }
   }
   }
   

   o.func();
   //결과 o === this
```






전역객체(Global object)는 특수한 객체이다.  
<span style="color:#f27c88;">모든 객체는 전역객체의 property(속성)</span>이다.

```javascript
   function func(){
      alert('Hello?');
   }

   // 평소 함수를 호출하는 방법은, 전역객체가 생략된 형태이다.
   func();
   window.func();
```
전역객체 관습적으로 생략하고 작성한다.
<br/>
<br/>
<span style="color:#f27c88;">핵심  </span>  
함수 앞에 . 이 붙어 있다면 그것은 객체를 의미한다.   
객체 뒤에 . 과 property 혹은 method가 작성된다!!!!!!!!


객체를 만들고 객체 안에서 메소드를 정의했다는 것은 무엇을 의미할까?  

```javascript
   const a = {
      'func' : function(){
         alert('hello');
      }
   }

   o.func();
   window.o.func();
   //두 실행 값은 같다.
```
<br/>

<span style="color:#f27c88;">즉, 모든 객체는 기본적으로 전역객체의 property임을 알 수 있다!</span> 

### <span style="color:#febc68;font-weight:bold">전역객체는 호스트 환경에 따라서 달라진다! </span> 
### <span style="color:#febc68;font-weight:bold">웹브라우저 자바스크립의 전역객체는 window이지만, node.js와 같은 서버측 자바스크립를 쓰고 있다면, global이 전역객체가 된다.</span>