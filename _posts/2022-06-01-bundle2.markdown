---
layout: post
title: 번들러(2) - Webpack
date: 2022-06-01 20:26:23 +0900
category: bundle
---

## <span style="color:#97cab3;font-weight:bold">Webpack 시작하기</span>
### <span style="color:#febc68;font-weight:bold">프로젝트 생성하기</span> 
   - npm 프로젝트 시작하여 package.js 파일 생성
   ```bash
      npm init -y
   ```   
   - 개발 의존성 패키지로 webpack 설치 -> node_modules 생성
   ```bash
      npm i -D webpack webpack-cli webpack-dev-server@next
   ``` 
   - 생성된 'package.json'파일에서 
   ```json
      "scripts": {
         "dev" : "webpack-dev-server --mode development", 
         "build" : "webpack --mode production"
      }
   ``` 
   - webpack에서 개발 서버를 오픈하려면 parcel과는 다르게 구성파일을 하나 제공해야한다. webpack.config.js(Node.js환경에서 )파일을 생성 -> webpack의 장점이자 단점! 구성파일을 하나씩 설정해줘야하기에 디테일한 부분까지 직접 관리할 수 있으나, 번거롭다!

   ```javascript
      const path = require('path')

      module.exports = {
         //파일을 읽어들이기 시작하는 진입점 설정
         entry:'./js/main.js',

         //결과물(번들)을 반환하는 설정
         output:{
            // node.js에서 사용하는 절대경로로 작성해야한다.
            path: path.resolve(__dirname, 'dist'),
            filename:'main.js',
            //구성을 변경했을 때, 전 구성의 파일이 남지 않게 하기 위한 옵션
            clean: true
         }
      }
   ``` 
   - 확인해보자! 'dist' 폴더가 생성되면 문제 없음!
   ```bash
      npm run build
   ```   
   [webpack 구성 참고](https://webpack.js.org/configuration/)  
   <br/>
   - 결과가 나오는 'dist'폴더에 js파일은 잘 확인되지만, index.html을 삽입하여 개발서버를 오픈해보자.  
    
   ```javascript
      //플러그인 설치
      npm i -D html-webpack-plugin
   ```    
   
   ```javascript
      const path = require('path')
      //플러그인 불러오기 위한 변수 설정
      const HtmlPlugin = require('html-webpack-plugin')
      module.exports = {
         
         entry:'./js/main.js',
         output:{
            //path: path.resolve(__dirname, 'dist'),
            //filename:'main.js',
            clean: true
         },

         //구성옵션을 추가,배열 데이터 할당
         plugins: [
            //생성자 함수처럼 실행 -> 실행되면서 결과가 반환되고 그 결과가 플러그인의 첫번째 아이템으로 사용된다는 의미
            new HtmlPlugin({
               //생성자 함수의 옵션으로 객체 데이터 
               template: './index.html'
            })
         ]
      }
   ```    

### <span style="color:#febc68;font-weight:bold">정적파일 연결하기</span> 
   - 개발 의존성 모듈로 '정적파일연결' plugin 설치
   ```bash
      npm i -D copy-webpack-plugin
   ```  
   - plugin 설치 후 'webpack.config.js' 파일에 아래 내용 추가
   ```javascript
   const CopyPlugin = require('copy-webpack-plugin')

      plugins: [
         new HtmlPlugin({
            template: './index.html'
         }),
          // from에 작성한 폴더명을 dist파일로 copy해주는 플러그인
         new CopyPlugin({
            patterns : [
               {from: 'static'}
            ]
         })
      ]
   ``` 
   <br/>
   <br/>

### <span style="color:#febc68;font-weight:bold">autoprefixer</span>
 = 공급업체 접두사(직독직해 ㅎㅎ)   
 = 브라우저별로 또는 브라우저의 버전별로 지원하는 css 기능이 다르기 때문에 vendor prefixer을 작성하여 모든 브라우저에서 에러를 줄인다.  
 = autoprefixer는 이러한 prefixer를 자동으로 적용해주는 패키지이다.

   ```bash
      npm i -D postcss autoprefixer
   ```
   - autoprefixer 패키지를 설치한 후 package.json에서 해당 패키지에 대한 옵션을 지정해준다.
   ```javascript
      "browserslist" : [
         "> 1% ", // 전세계의 점유율이 1%이상인 모든 브라우저
         "last 2 versions" //위에 해당되는 브라우저의 마지막 2버전까지 지원하겠다는 의미의 옵션
      ]
   ``` 
   - .postcssrc.js 파일을 생성 -> 파일 앞에 .를 구성옵션 혹은 숨김 파일을 의미하며, rc(Runtime Configuration의 약어)가 붙은 파일은 구성파일을 의미한다.

   ```javascript
      // Node.js 환경에서 동작하는 CommonJS방식의 내보내기 가져오기

      const autoprefixer = require('autoprefixer') // = import autoprefixer from 'autoprefixer'

      module.exports = {
         plugins : [
            autoprefixer
         ]
      } 
      // = export {
      //   plugins : [
      //      autoprefixer
      //   ]
      //}
   ```   
 
   <br/>
   <br/>

 ### <span style="color:#febc68;font-weight:bold">babel</span>
  = Babel은 ECMAScript 2015+ 코드를 이전 JavaScript 엔진에서 실행할 수 있는 이전 버전과 호환되는 JavaScript 버전으로 변환하는 데 주로 사용되는 무료 오픈 소스 JavaScript 트랜스컴파일러입니다. Babel은 JavaScript 프로그래밍 언어의 최신 기능을 사용하는 인기 있는 도구입니다. [위키피디아-babel](https://en.wikipedia.org/wiki/Babel_(transcompiler))  
  = ECMAScript의 최신 버전으로 작성된 파일이 구버전에서 작동하지 않을 수 있기에, 바벨을 이용하여 구버전의 파일로 변환(=컴파일)해주는 도구!  
  
  - 개발 의존성 모듈로 babel을 설치해보자
    ```bash
      npm i -D postcss autoprefixer
    ```  
 - .babelrc.js 파일 생성   
    ```javascipt
   
      module.exports = {
         preset : ['@babel/preset-env']
      }
   ```  
  - autoprefixer 설치 후 적었던 'browserslist' 관련 옵션이 필요하다.  
   <br/>
   <br/>

  ### <span style="color:#febc68;font-weight:bold">CLI</span>

  [parcel-CLI](https://ko.parceljs.org/cli.html) -> 참고하여 여러가지 옵션을 제공해보자.