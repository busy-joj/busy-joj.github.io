---
layout: post
title: 번들러 - Webpack
date: 2022-06-01 20:26:23 +0900
category: Framework
---

## <span style="color:#97cab3;font-weight:bold">Webpack 시작하기</span>
### <span style="color:#febc68;font-weight:bold">프로젝트 생성하기</span> 
   - npm 프로젝트 시작하여 package.js 파일 생성
   ```bash
      npm init -y
   ```   
   - 개발 의존성 패키지로 webpack 설치 -> node_modules 생성
   ```bash
      npm i -D webpack webpack-cli webpack-dev-server@next
   ``` 
   - 생성된 'package.json'파일에서 
   ```json
      "scripts": {
         "dev" : "webpack-dev-server --mode development", 
         "build" : "webpack --mode production"
      }
   ``` 
   - webpack에서 개발 서버를 오픈하려면 parcel과는 다르게 구성파일을 하나 제공해야한다. webpack.config.js(Node.js환경에서 )파일을 생성 -> webpack의 장점이자 단점! 구성파일을 하나씩 설정해줘야하기에 디테일한 부분까지 직접 관리할 수 있으나, 번거롭다!

      ```javascript
         const path = require('path')

         module.exports = {
            //파일을 읽어들이기 시작하는 진입점 설정
            entry:'./js/main.js',

            //결과물(번들)을 반환하는 설정
            output:{
               // node.js에서 사용하는 절대경로로 작성해야한다.
               path: path.resolve(__dirname, 'dist'),
               filename:'main.js',
               //구성을 변경했을 때, 전 구성의 파일이 남지 않게 하기 위한 옵션
               clean: true
            }
         }
      ``` 
   - 확인해보자! 'dist' 폴더가 생성되면 문제 없음!
   ```bash
      npm run build
   ```   
   [webpack 구성 참고](https://webpack.js.org/configuration/)  
   <br/>
   - 결과가 나오는 'dist'폴더에 js파일은 잘 확인되지만, index.html을 삽입하여 개발서버를 오픈해보자.  
    
      ```javascript
         //플러그인 설치
         npm i -D html-webpack-plugin
      ```    
      
      ```javascript
         const path = require('path')
         //플러그인 불러오기 위한 변수 설정
         const HtmlPlugin = require('html-webpack-plugin')
         module.exports = {
            
            entry:'./js/main.js',
            output:{
               //path: path.resolve(__dirname, 'dist'),
               //filename:'main.js',
               clean: true
            },

            //구성옵션을 추가,배열 데이터 할당
            plugins: [
               //생성자 함수처럼 실행 -> 실행되면서 결과가 반환되고 그 결과가 플러그인의 첫번째 아이템으로 사용된다는 의미
               new HtmlPlugin({
                  //생성자 함수의 옵션으로 객체 데이터 
                  template: './index.html'
               })
            ]
         }
      ```    

### <span style="color:#febc68;font-weight:bold">정적파일 연결하기</span> 
   - 개발 의존성 모듈로 '정적파일연결' plugin 설치
   ```bash
         npm i -D copy-webpack-plugin
   ```  
   - plugin 설치 후 'webpack.config.js' 파일에 아래 내용 추가
   ```javascript
   const CopyPlugin = require('copy-webpack-plugin')

         plugins: [
            new HtmlPlugin({
               template: './index.html'
            }),
            // from에 작성한 폴더명을 dist파일로 copy해주는 플러그인
            new CopyPlugin({
               patterns : [
                  {from: 'static'}
               ]
            })
         ]
   ``` 

   <br/>

### <span style="color:#febc68;font-weight:bold">module - css, scss</span>
 = css를 읽어주는 모듈을 설치해보자
   ```bash
   npm i -D css-loader style-loader
   ``` 

   ```javascript
   module:{
      rules: [
         {
            // .css로 끝나는 확장자를 찾는 정규식
            test:/\.css$/,
            use:[
            'style-loader',
            'css-loader'
            ]
         }
      ]
   }
   ```

 = scss를 읽어주는 모듈을 설치해보자  
   ```bash
   npm i -D sass-loader sass
   ```   
   -> sass-loader로 코드를 읽어주고, sass모듈을 통해 문법을 해석해주기 위해 함께 설치한다
   ```javascript
   module:{
      rules: [
         {
            test:/\.s[ac]ss$/i,
            use:[
            'style-loader',
            'css-loader',
            'sass-loader'
            ]
         }
      ]
   }
   ```

### <span style="color:#febc68;font-weight:bold">autoprefixer</span>
 = 공급업체 접두사(직독직해 ㅎㅎ)   
 = 브라우저별로 또는 브라우저의 버전별로 지원하는 css 기능이 다르기 때문에 vendor prefixer을 작성하여 모든 브라우저에서 에러를 줄인다.  
 = autoprefixer는 이러한 prefixer를 자동으로 적용해주는 패키지이다.

   ```bash
   npm i -D postcss autoprefixer postcss-loader
   ```
   - autoprefixer 패키지를 설치한 후 webpack.config.js에서 해당 패키지에 대한 옵션을 지정해준다.  
   ```javascript
   module:{
            rules: [
               {
                  test:/\.s[ac]ss$/i,
                  use:[
                  'style-loader',
                  'css-loader',
                  //sass-loader를 통해서 해석한 후 해석된 css에 prefixer을 붙이기 위해 순서가 중요하다! 
                  'postcss-loader',
                  'sass-loader'
                  ]
               }
            ]
   }
   ```
   - package.json으로 이동해서 parcel과 동일하게 옵션을 추가 해줘야 한다.
   ```javascript
         "browserslist" : [
            "> 1% ", // 전세계의 점유율이 1%이상인 모든 브라우저
            "last 2 versions" //위에 해당되는 브라우저의 마지막 2버전까지 지원하겠다는 의미의 옵션
         ]
   ``` 
   - .postcssrc.js 파일을 생성 -> parcel 번들러와 동일

      ```javascript
         module.exports = {
            plugins : [
               require('autoprefixer')
            ]
         } 
      ```   

   <br/>


### <span style="color:#febc68;font-weight:bold">babel</span>   
  = ECMAScript의 최신 버전으로 작성된 파일이 구버전에서 작동하지 않을 수 있기에, 바벨을 이용하여 구버전의 파일로 변환(=컴파일)해주는 도구!  
  
  - 개발 의존성 모듈로 babel을 설치해보자
    ```bash
      npm i -D @babel/core @babel/preset-env @babel/plugin-transform-runtime
    ```  

  - .babelrc.js 파일 생성 

    ```javascript
      module.exports = {
         //일일히 명시해줘야 하는 기능을 한번에 명시해주는 모듈
         presets: ['@babel/preset-env'],
         //비동기 처리를 위해 사용하는 모듈
         plugins: [
            ['@babel/plugin-transform-runtime']
         ]
      }
   ```  

  - webpack.config.js에 옵션 추가
      ```javascript
      module:{
         rules: [
               {
                  test:/\.js$/,
                  use:[
                     'babel-loader'
                  ]
               }
         ]
      }
      ```   

   - babel-loader 추가 설치하면 babel 구성 완료! 
   ```bash
      npm i -D babel-loader
   ``` 
   <br/>
   <br/>
