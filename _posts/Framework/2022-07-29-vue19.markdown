---
layout: post
title: Vue - Vue Test Utils
date: 2022-07-22 22:23:41 +0900
category: Framework
---

### <span style="color:#febc68;font-weight:bold">단위테스트(Unit Test)</span> 
Unit Test = 단위 테스트  
단위 테스트란 데이터(상태), 함수(메소드), 컴포넌트 등의 정의된 프로그램 최소 단위들이 독립적으로 정상 동작하는지 확인하는 방법  
jest, Vue Test Utils라는 프레임워크를 사용하여 테스트를 진행한다.  

### <span style="color:#febc68;font-weight:bold"> 환경구성 및 사용법</span> 

```javascript
import { mount } from '@vue/test-utils'
import Example from './Example.vue'

test('메세지', () => {
    // 추가해야할 옵션이 있다면 두번째 인수에 작성한다.
    const wrapper = mount(Example)
    // wrapper.vm === this
    expect(wrapper.vm.msg).toBe('Hello vue')
    expect(wrapper.find('div').text()).toBe('Hello vue??')
})
```











- 테스트 환경을 구성해보자! 설치부터 시작! 
```bash
    npm i -D jest @vue/test-utils@next vue-jest@next babel-jest
```  
설치 후엔 jest.config.js 파일을 생성해서 구성옵션을 작성해보자!!  
```javascript
    module.exports = {
        // 파일 확장자를 지정하지 않은 경우, Jest가 검색할 확장자 목록
        // 일반적으로 많이 사용되는 모듈의 확장자를 지정한다.
        moduleFileExtensions:[
            'js',
            'vue'
        ],
        // '~' 같은 경로 별칭을 매핑한다.
        // '<rootDir>' 토큰을 사용해 루트 경로를 참조 할 수 있다.
        moduleNameMapper:{
            '^~/(.*)$' : '<rootDir>/src/$1'
        },
        // 테스트할 필요가 없기 때문에 아래에 작성된 경로에 일치된 모듈은 가지고 오지 않는다.
        modulePathIgnorePatterns:[
            '<rootDir>/node_modules',
            '<rootDir>/dist'
        ],
        // jsdom 환경에 대한 URL을 설정한다.
        testURL: 'http://localhost',
        // 일치하는 파일의 변환 모듈을 지정한다
        transform:{
            '^.+\\.vue$' : 'vue-jest',
            '^.+\\.js$' : 'babel-jest'
        }
    }
```   
만약 jest의 전역 변수가 에러로 인해 동작하지 않는다면, eslint 설정을 바꿔줘야 한다.  
.eslintrs.js에 아래 내용을 기재하자!
```javascript
    env:{
        jest: true
    }
```  
작성한 테스트 코드가 정상적으로 작동하는지 확인하기 위해서 터미널에서 script를 동작시켜줘야 한다.  
package.json에서 아래 내용을 기재하여 설정해주자.
```javascript
    // 기존에 작성되어 있던 scripts에 추가!
  "scripts": {
    "test:unit" : "jest --watchAll"
  }
```    

설정은 끝났다! 
tests 폴더 내부에 example.js 파일을 만들어서 간단한 테스트를 진행해보자!
```javascript
    // example.js
    export function (num){
        return num * 2
    }
```    
간단히 만든 함수를 구성해놓은 테스트 환경에서 동작시키기 위해서 export를 이용하여 내보내주는 것이 매우 중요하다.
다음으로 tests 폴더 내부에 example.test.js 파일을 만들어서 import를 이용해 함수를 가져온다.
```javascript
    // example.test.js
    import { double } from './example'

    // 패키지 내부에서 전역적으로 사용할 수 있는 함수
    test('첫 테스트', () => {
        // 테스트 통과
        expect(123).toBe(123)
        // 테스트 실패
        expect(123).toBe('123')

    })
```    
작성한 내용을 저장하고 터미널에 위에 설정해둔 script 명령을 사용한다.
```bash
    npm run test:unit
```

값을 비교해서 일치하면 통과, 불일치 하면 실패!

### <span style="color:#febc68;font-weight:bold"> jest 전역함수</span> 
- test('테스트 이름', callback fn) : 우리가 만들어 내는 테스트를 구분해주는 함수
```javascript
    test('테스트1', () => {
        expect(123).toBe(123)
    })
```

- describe() : 일종의 테스트 그룹, before 혹은 after 함수를 사용하기 위해서 사용
```javascript
    decribe('그룹1', () => {
        test('테스트1', () => {
            expect(123).toBe(123)
        })
        test('테스트2', () => {
            expect(123).toBe(123)
        })    
    })
```
- beforeAll() : 그룹 내에 모든 테스트 전에 단 한번만 실행된다.
- afterAll() : 그룹 내에 모든 테스트 후에 단 한번만 실행된다.
```javascript
    decribe('그룹1', () => {
        beforeAll(() => {

        })
        afterAll(() => {

        })        
        test('테스트1', () => {
            expect(123).toBe(123)
        })
        test('테스트2', () => {
            expect(123).toBe(123)
        })    
    })
```

- beforeEach() : 그룹 내에 각각의 테스트 직전에  실행된다.
- afterEach() : 그룹 내에 각각 테스트 후에  실행된다.
```javascript
    decribe('그룹1', () => {
        //두번씩 실행
        beforeEach(() => {

        })
        afterEach(() => {

        })        
        test('테스트1', () => {
            expect(123).toBe(123)
        })
        test('테스트2', () => {
            expect(123).toBe(123)
        })    
    })
```

### <span style="color:#febc68;font-weight:bold"> jest Matcher(일치도구)</span> 
- expect(value)
- .toBe(value) : 기대값이 원시형 데이터 사용
- .toEqual(value) : 기대값이 참조형 데이터일 때 사용
- .not 
- .resolves
- .rejects

### <span style="color:#febc68;font-weight:bold"> 비동기 테스트</span> 
1. 비동기 함수가 언제 종료되는지를 명시해주는 용도의 매개변수인 done을 이용해보자!  
```javascript
    describ('비동기 테스트', () => {
        test('done', (done) => {
            asyncFn().then(res => {
                expect(res).toBe('done')
                // 비동기 코드가 종료되는 부분에 done을 작성해주게 되면 done이 호출 되기 전까지 기다렸다가 테스트가 진행된다.
                done()
            })
        })
    })
```
2. 별도의 매개변수를 작성하는 것이 아니라 return 작성하여 반환해줌으로서 테스트가 비동기로 동작해야하는 것임을 인지할 수 있게 해준다.
```javascript
    describ('비동기 테스트', () => {
        test('done', () => {
            return asyncFn().then(res => {
                expect(res).toBe('done')
            })
        })
    })
```

3. 비동기 함수 자체를 비교값에 넣고 resolves를 이용해 비동기 함수가 완료될 때까지 기다린 후 테스트가 진행되도록 한다.
```javascript
    describ('비동기 테스트', () => {
        test('resolves', () => {
            // 테스트 환경에서는 정확히 얼마나 기다려야 하는지 모르기 때문에
            // 꼭 return 으로 반환해주어야 한다.
            return expect(asyncFn()).resolves.toBe('done')
        })
    })
```

4. 비동기의 대표주자 async/await
```javascript
    describ('비동기 테스트', () => {
        test('async/await', async () => {
            const res = await asyncFn()
            expect(res).toBe('done')
        })
    })
```

* test() 함수는 최대 5초 동안만 진행하기 때문에 5초 이상의 테스트는 실패하게 된다. 그럴때 세번째 인수를 기입하여 테스트 시간을 늘려준다. 자주 사용하는 방법은 아니지만 알고는 있자!
```javascript
    describ('비동기 테스트', () => {
        test('async/await', async () => {
            const res = await asyncFn()
            expect(res).toBe('done')
        })
    }, 7000)
```
