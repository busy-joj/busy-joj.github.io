---
layout: post
title: Git 기본개념과 사용법
date: 2022-05-23 20:26:23 +0900
category: Git
---
# " Git 완벽하게 파악하자! "

## <span style="color:#97cab3;font-weight:bold">Repository(저장소)<span>
파일이나 디렉토리를 저장하는 장소이다.
1. local repository : 개인 PC 내 저장소  
 = Working Directory : 실제 작업공간(workspace)를 의미  
 = index : Stage역할(stage : Working Dir에서 작업한 후 commit 하기 위해 파일을 올려두는 곳-대기장소)  
 = head : commit을 한 소스코드

 <img src="../../../../public/img/repository.png" alt="git 저장소 설명" width="50%"/>

2. remote repository  
 = 파일을 서버에서 관리하고 공유가 가능한 원격 저장소. 
 <br/>
 <br/>
> 작업한 내용을 스테이지에 올려서 로컬 저장소에 커밋하고, 이를 푸시해서 원격저장소로 보낸다  
>  -> 의미를 완벽하게 파악하자

<br/>  

## <span style="color:#97cab3;font-weight:bold">init vs clone<span>
1. git init  
 = 저장소로 사용하고자 하는 디렉터리로 이동한 후 실행  
 = 구성이 되어있지 않은 프로젝트 일 때  
 = 입력하면, 프로젝트 폴더 안에 .git 이라는 숨겨진 폴더가 생성된다.(만약 폴더가 안보인다면, 보기에서 숨겨진 파일 보기 체크!)

    ```plaintext
    git init
    ```


2. git clone   
 = 원격 저장소에 저장된 작업파일을 복사해서 로컬 저장소에 가져옴  
 = 작업중이거나 작업완료된 프로젝트 일 때
```plaintext
    git clone (repository URL)
```
<br/>  

## <span style="color:#97cab3;font-weight:bold">기타 등등<span>
1. git status  
     = working directory(작업 디렉토리)와 stage의 상태를 확인하기 위해 사용
     = 파일 하나씩 추가할 경우 add 파일명으로 작성하지만,   
       추가해야할 파일이 수십 수백 개라면 add . 으로 Untracked 파일을 한번에 추가할 수 있다.
 ```plaintext
    git status  

    -> Changes to be Committed : stage 영역에 넘어가 있는 변경 내용을 보여준다.
    -> Changes not staged for commit : stage 전 단계인 working dir에 있는 변경 내용을 보여준다.
    -> Untracked files : 한번도 해당 Git 저장소가 관리한 적이 없는 새로운 파일을 보여준다.
 ```

2. git add  
     = commit 전 변경분을 모아놓기 위해서 사용
     = 파일 하나씩 추가할 경우 add 파일명으로 작성하지만,   
       추가해야할 파일이 수십 수백 개라면 add . 으로 Untracked 파일을 한번에 추가할 수 있다.  
     = * tracked 상태, 즉 파일을 add한 후 <span style="color:#f27c88;">Untracked, 되돌리고 싶다면 git rm 파일명<span> *
 ```plaintext
    git add 파일명 (ex:index.html)
    git add .
 ```

3. git commit  
     = stage에서 commit 대기 중인 파일을 명시적인 기록으로 남기는 것  
     = * <span style="color:#f27c88;">로그인을 안 한 경우 에러가 뜨며, 해결방법은 git config --global user.name "내이름" / git config --global user.email "내이메일"<span> *
 ```plaintext
    git commit -m 설명
 ```

 4. git push 
     = commit한 내용을 remote repository(원격저장소)에 올린다.
     = 이 단계까지 마쳐야 git에서 변경 내역을 확인할 수 있음.
 ```plaintext
     git push
 ```
  
 5. git pull  
     = 원격 저장소의 내용을 로컬 저장소에 반영한다.  
     = clone과의 차이점 : clone은 pull + git remote add 해당주소 기능 / <span style="color:#f27c88;"> pull은 fetch + merge 기능<span>
 ```plaintext
     git pull
 ```
   
 6. git fetch
     = 원격 저장소의 변경사항을 로컬 저장소로 가져가기 전 대기 상태   
     = 자동으로 merge를 해주지 않기 때문에 직접 확인하기를 원할 때 사용하며, 확인 후 merge하는 과정을 거친다.  
 ```plaintext
     git fetch
 ```  
7. git branch  
     = 여러 사람에 의해 동시 다발적으로 수정이 일어날 때 각 개인의 작업물을 구분해서 반영하여, 보다 안전하고 효율적으로 프로젝트를 진행할 수 있게 해주는 독립된 working dir이다.  
     = 주가 되는 branch를 복사한 새branch를 생성하여, 독립적인 기능을 작업한 후 merge하여 합치기를 반복하며, 프로젝트를 진행한다.  
 ```plaintext
     git branch branch-name
 ```
   

8. git merge
     = branch의 변경사항을 다른 branch에 반영할 때 사용한다.
     = 현재 branch를 기준으로 병합된다.  
     = 만약 두 branch가 같은 파일의 같은 곳을 수정한 후 merge 하면 conflict(충돌)이 발생한다.
 ```plaintext
    git merge 합칠-branch-name
 ```